 { <program>  { PROGRAM <procedure ID>  { <identifier>  { test1  }  } ; <block>  { BEGIN <conditional expression>  { <logical summand>  { <logical multiplier>  { <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 0  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  } <comparison operator>  { >  } <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 1  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } <logical multiplier list>  { AND <logical multiplier>  { <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 2  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  } <comparison operator>  { <  } <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 3  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } <logical multiplier list>  { AND <logical multiplier>  { <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 4  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  } <comparison operator>  { <  } <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 5  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } <logical multiplier list>  {  }  }  }  } <logical>  { OR <logical summand>  { <logical multiplier>  { <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 6  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  } <comparison operator>  { >  } <expression>  { <summand>  { <multiplier>  { <variable>  { <variable id>  { <identifier>  { a  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } <logical multiplier list>  { AND <logical multiplier>  { <expression>  { <summand>  { <multiplier>  { ( <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 5  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  { <add instruction>  { +  } <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 30  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } )  } <multiplier list>  {  }  } <summand list>  {  }  } <comparison operator>  { <=  } <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 4  }  } <fractional part>  {  }  }  }  } <multiplier list>  { <multiplier instruction>  { *  } <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 20  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  }  } <summand list>  {  }  }  } <logical multiplier list>  { AND <logical multiplier>  { <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 2  }  } <fractional part>  {  }  }  }  } <multiplier list>  { <multiplier instruction>  { *  } <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 3  }  } <fractional part>  {  }  }  }  } <multiplier list>  { <multiplier instruction>  { MOD  } <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 6  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  }  }  } <summand list>  {  }  } <comparison operator>  { >  } <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 3  }  } <fractional part>  { # <sign>  { -  } <unsigned int>  { 3  }  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } <logical multiplier list>  {  }  }  }  } <logical>  { OR <logical summand>  { <logical multiplier>  { <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 5  }  } <fractional part>  {  }  }  }  } <multiplier list>  { <multiplier instruction>  { *  } <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 7  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  }  } <summand list>  {  }  } <comparison operator>  { >=  } <expression>  { <summand>  { <multiplier>  { <variable>  { <dimension>  {  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } <logical multiplier list>  { AND <logical multiplier>  { NOT <logical multiplier>  { <expression>  { <summand>  { <multiplier>  { <variable>  { <dimension>  { [ <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 5  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  { <add instruction>  { +  } <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 3  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } <expression list>  { , <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 6  }  } <fractional part>  {  }  }  }  } <multiplier list>  { <multiplier instruction>  { /  } <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 4  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  }  } <summand list>  {  }  } <expression list>  {  }  } ]  }  }  } <multiplier list>  {  }  } <summand list>  {  }  } <comparison operator>  { <  } <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 3  }  } <fractional part>  { # <sign>  {  } <unsigned int>  { 6  }  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  }  } <logical multiplier list>  { AND <logical multiplier>  { [ <conditional expression>  { <logical summand>  { <logical multiplier>  { <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 5  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  } <comparison operator>  { >  } <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 11  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } <logical multiplier list>  {  }  } <logical>  { OR <logical summand>  { <logical multiplier>  { <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 8  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  } <comparison operator>  { =  } <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 9  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } <logical multiplier list>  {  }  } <logical>  {  }  }  } ]  } <logical multiplier list>  { AND <logical multiplier>  { <expression>  { <summand>  { <multiplier>  { <variable>  { <variable id>  { <identifier>  { a  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  } <comparison operator>  { >  } <expression>  { - <summand>  { <multiplier>  { <variable>  { <variable id>  { <identifier>  { b  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } <logical multiplier list>  {  }  }  }  }  } <logical>  { OR <logical summand>  { <logical multiplier>  { <expression>  { <summand>  { <multiplier>  { ^ <multiplier>  { <variable>  { <variable id>  { <identifier>  { c  }  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  } <comparison operator>  { <  } <expression>  { <summand>  { <multiplier>  { <variable>  { <variable id>  { <identifier>  { a  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } <logical multiplier list>  { AND <logical multiplier>  { <expression>  { <summand>  { <multiplier>  { <variable>  { <complex variable>  { " <complex number>  { <left part>  { <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 7  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  { <add instruction>  { +  } <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 5  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  }  } <right part>  { , <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 9  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  { <add instruction>  { +  } <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 2  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  }  }  } "  }  }  } <multiplier list>  {  }  } <summand list>  {  }  } <comparison operator>  { <  } <expression>  { <summand>  { <multiplier>  { <complex constant>  { ' <complex number>  { <left part>  { <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 8  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  { <add instruction>  { +  } <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 2  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  }  } <right part>  { $EXP ( <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 2  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  { <add instruction>  { +  } <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 3  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } )  }  } '  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } <logical multiplier list>  { AND <logical multiplier>  { <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 2  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  { <add instruction>  { +  } <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 3  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } <comparison operator>  { <>  } <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 4  }  } <fractional part>  {  }  }  }  } <multiplier list>  { <multiplier instruction>  { &  } <multiplier>  { <complex constant>  { ' <complex number>  { <left part>  { <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 10  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  { <add instruction>  { +  } <summand>  { <multiplier>  { <complex constant>  { ' <complex number>  { <left part>  { <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 11  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  { <add instruction>  { +  } <summand>  { <multiplier>  { <variable>  { <variable id>  { <identifier>  { b  }  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  }  } <right part>  {  }  } '  }  } <multiplier list>  {  }  } <summand list>  {  }  }  }  } <right part>  { , <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 2  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  } <summand list>  { <add instruction>  { !  } <summand>  { <multiplier>  { <variable>  { <complex variable>  { " <complex number>  { <left part>  { <expression>  { <summand>  { <multiplier>  { <variable>  { <dimension>  {  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } <right part>  { , <expression>  { <summand>  { <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 13  }  } <fractional part>  {  }  }  }  } <multiplier list>  { <multiplier instruction>  { MOD  } <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 12  }  } <fractional part>  {  }  }  }  } <multiplier list>  { <multiplier instruction>  { *  } <multiplier>  { <unsigned const>  { <unsigned number>  { <integer part>  { <unsigned int>  { 2  }  } <fractional part>  {  }  }  }  } <multiplier list>  {  }  }  }  } <summand list>  {  }  }  }  } "  }  }  } <multiplier list>  {  }  } <summand list>  {  }  }  }  }  } '  }  } <multiplier list>  {  }  }  } <summand list>  {  }  }  } <logical multiplier list>  { AND <logical multiplier>  { <expression>  { <summand>  { <multiplier>  { <builtin-function-identifier>  { <identifier>  { SIN  }  } <actual-arguments>  { ( <argument-list>  { <unsigned int>  { 1  } <argument-list>  {  }  } )  }  } <multiplier list>  {  }  } <summand list>  { <add instruction>  { +  } <summand>  { <multiplier>  { <builtin-function-identifier>  { <identifier>  { COS  }  } <actual-arguments>  { ( <argument-list>  { <unsigned int>  { 5  } <argument-list>  { <unsigned int>  { 6  } <argument-list>  { <unsigned int>  { 7  } <argument-list>  {  }  }  }  } )  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } <comparison operator>  { <>  } <expression>  { <summand>  { <multiplier>  { <builtin-function-identifier>  { <identifier>  { LOG  }  } <actual-arguments>  { ( <argument-list>  {  } )  }  } <multiplier list>  {  }  } <summand list>  {  }  }  } <logical multiplier list>  {  }  }  }  }  } <logical>  {  }  }  }  }  } END  } .  }  } 
